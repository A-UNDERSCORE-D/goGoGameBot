linters-settings:
  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).Tracef
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).Debugf
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).InfoF
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).Warnf
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).Critf
          - (*git.ferricyanide.solutions/A_D/goGoGameBot/pkg/log.Logger).Panicf
  gocognit:
    min-complexity: 15

  maligned:
    suggest-new: true

  misspell:
    locale: GB

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

linters:
  disable-all: true
  enable:
    - megacheck
    - deadcode
    - dogsled
    - dupl
    - errcheck
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - gosec
    - govet
    - golint
    - gofmt
    - ineffassign
    - lll
    # - maligned -- On second thought, perhaps
    - nakedret
    - scopelint
    - structcheck
    - typecheck
    - unconvert
    - unparam
    - varcheck
    - whitespace
    - wsl

    - misspell
    - funlen
    - bodyclose
    - goprintffuncname
    - interfacer
    - nakedret
    - godox
    # TODO: - goerr113 For now, no, add this later
    - nestif
    - nolintlint

max-issues-per-linter: 0

issues:
  exclude-use-default: false
  exclude:
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked

    # Unmarshal XML and JSON are obvious in what they do. Lets not.
    - exported method `.+\.Unmarshal(?:XML|JSON)` should have comment or be unexported
    # golint: Annoying issue about not having a comment. The rare codebase has such comments
    # - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)

    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    # - ineffective break statement. Did you mean to break out of the outer loop

    # gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited

    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)

    # gosec: Duplicated errcheck checks
    - G104

    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)

    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable
