package mutexTypes

// Code generated by go run genMutexTypes.go DO NOT EDIT.
//go:generate go run ./generate/genMutexTypes.go

import (
	"sync"
	"time"
)

// Bool is a bool wrapped with a sync.RWMutex.
type Bool struct {
	x bool
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *Bool) Get() bool {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *Bool) Set(thing bool) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}

// Int is a int wrapped with a sync.RWMutex.
type Int struct {
	x int
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *Int) Get() int {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *Int) Set(thing int) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}

// StringSlice is a []string wrapped with a sync.RWMutex.
type StringSlice struct {
	x []string
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *StringSlice) Get() []string {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *StringSlice) Set(thing []string) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}

// Duration is a time.Duration wrapped with a sync.RWMutex.
type Duration struct {
	x time.Duration
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *Duration) Get() time.Duration {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *Duration) Set(thing time.Duration) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}

// Time is a time.Time wrapped with a sync.RWMutex.
type Time struct {
	x time.Time
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *Time) Get() time.Time {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *Time) Set(thing time.Time) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}

// Arbitrary is a interface{} wrapped with a sync.RWMutex.
type Arbitrary struct {
	x interface{}
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *Arbitrary) Get() interface{} {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *Arbitrary) Set(thing interface{}) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}
