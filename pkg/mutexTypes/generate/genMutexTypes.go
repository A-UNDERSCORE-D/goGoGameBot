package main

import (
	"bytes"
	"go/format"
	"html/template"
	"os"
)

var toGen = [][]string{
	{"MutexBool", "bool"},
	{"MutexInt", "int"},
	{"MutexStringSlice", "[]string"},
	{"MutexDuration", "time.Duration"},
	{"MutexTime", "time.Time"},
}

const genHeader = `// Code generated by go run genMutexTypes.go DO NOT EDIT.
//go:generate go run ./generate/genMutexTypes.go

import (
	"sync"
	"time"
)
`
const templ = `
// {{.Name}} is a {{.Type}} wrapped with a sync.RWMutex. 
type {{.Name}} struct {
	x {{.Type}}
	m sync.RWMutex
}

// Get fetches the stored value in a concurrent safe manner
func (x *{{.Name}}) Get() {{.Type}} {
	x.m.RLock()
	defer x.m.RUnlock()
	return x.x
}

// Set sets the stored value in a concurrent safe manner
func (x *{{.Name}}) Set(thing {{.Type}}) {
	x.m.Lock()
	x.x = thing
	x.m.Unlock()
}
`

func main() {
	t := template.Must(template.New("main").Parse(templ))
	b := &bytes.Buffer{}
	b.WriteString("package mutexTypes\n")
	b.WriteString(genHeader)

	for _, name := range toGen {
		if err := t.Execute(b, map[string]string{"Name": name[0], "Type": name[1]}); err != nil {
			panic(err)
		}
		b.WriteByte('\n')
	}

	formatted, err := format.Source(b.Bytes())
	if err != nil {
		panic(err)
	}

	f, err := os.OpenFile("mutexTypes.go", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		panic(err)
	}
	defer f.Close()
	f.Write(formatted)
}
